import { Elysia } from 'elysia';
import {
  findAllController,
  findByIdController,
  createController,
  updateController,
  deleteController
} from '../controllers/{{ fileName }}.controller';

export const {{ fileName }}Route = new Elysia({ prefix: '/{{ fileName }}' })
  .get(
    '/',
    () => findAllController(),
    {{#if useSwagger}}
    {
      detail: {
        summary: 'Get all {{ fileName }}',
        tags: ['{{ fileName }}'],
        responses: {
          200: { description: 'List of {{ fileName }}' },
          401: { description: 'Unauthorized' },
          403: { description: 'Forbidden' },
          500: { description: 'Internal server error' },
        },
      },
    }
    {{/if}}
  )
  .get(
    '/:id',
    ({ params }) => findByIdController(Number(params.id)),
    {{#if useSwagger}}
    {
      detail: {
        summary: 'Get a single {{ fileName }} by ID',
        tags: ['{{ fileName }}'],
        params: {
          id: 'number',
        },
        responses: {
          200: { description: 'A single {{ fileName }}' },
          400: { description: 'Invalid ID format' },
          401: { description: 'Unauthorized' },
          403: { description: 'Forbidden' },
          404: { description: '{{ fileName }} not found' },
          500: { description: 'Internal server error' },
        },
      },
    }
    {{/if}}
  )
  .post(
    '/',
    ({ body }) => createController(body),
    {{#if useSwagger}}
    {
      detail: {
        summary: 'Create new {{ fileName }}',
        tags: ['{{ fileName }}'],
        body: {
          type: 'object',
          required: ['exampleField'],
          properties: {
            exampleField: { type: 'string' },
          },
        },
        responses: {
          201: { description: '{{ fileName }} created' },
          400: { description: 'Invalid request body' },
          401: { description: 'Unauthorized' },
          403: { description: 'Forbidden' },
          500: { description: 'Internal server error' },
        },
      },
    }
    {{/if}}
  )
  .put(
    '/:id',
    ({ params, body }) => updateController(Number(params.id), body),
    {{#if useSwagger}}
    {
      detail: {
        summary: 'Update {{ fileName }} by ID',
        tags: ['{{ fileName }}'],
        params: {
          id: 'number',
        },
        body: {
          type: 'object',
          properties: {
            exampleField: { type: 'string' },
          },
        },
        responses: {
          200: { description: '{{ fileName }} updated' },
          400: { description: 'Invalid request' },
          401: { description: 'Unauthorized' },
          403: { description: 'Forbidden' },
          404: { description: '{{ fileName }} not found' },
          500: { description: 'Internal server error' },
        },
      },
    }
    {{/if}}
  )
  .delete(
    '/:id',
    ({ params }) => deleteController(Number(params.id)),
    {{#if useSwagger}}
    {
      detail: {
        summary: 'Delete {{ fileName }} by ID',
        tags: ['{{ fileName }}'],
        params: {
          id: 'number',
        },
        responses: {
          200: { description: '{{ fileName }} deleted' },
          400: { description: 'Invalid ID' },
          401: { description: 'Unauthorized' },
          403: { description: 'Forbidden' },
          404: { description: '{{ fileName }} not found' },
          500: { description: 'Internal server error' },
        },
      },
    }
    {{/if}}
  );
